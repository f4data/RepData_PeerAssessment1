a <- available.pacakges()
a <- available.packages()
head(rownames(a), 3)
head(rownames(a), 10)
head(rownames(a), 10)
install.pacakges("slidify")
install.packages("slidify")
install.packages(c("slidify", "ggplot2", "devtools"))
install.packages("slidify")
library(ggplot2)
search()
1
1,2
help search
help.search(search)
help.search("search")
version
find.package("devtools")
library(devtools)
find_rtools()
find_rtools()
find_rtools()
load("rtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
set.seed(1)
rpois(5, 2)
?set.seed
rep(0:1, each = 5)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y ~ x)
plot(x, y)
?Rprof
setwd("~/Courses/Data Science/5.Reproducible Research/Exercises/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
militaryTime <- sprintf("%04d", activity$interval)
activity$time <- paste(substr(militaryTime,1,2), substr(militaryTime,3,4),sep=":")
library(dplyr)
daily.steps <- activity %>%
group_by(date) %>%
summarize (total=sum(steps, na.rm=TRUE))
hist(daily.steps$total, xlab ="Number of steps per day (grouped by thousands)", main ="Distribution of steps per day", col = "lightblue", breaks=seq(0, by=1000, len=23))
# Compute and round the mean
daily.steps.mean <- mean(daily.steps$total)
daily.steps.mean <- round(daily.steps.mean, digits=2)
abline( v = daily.steps.mean, col = 2, lty = 2)
# Compute and round the median
daily.steps.median <- median(daily.steps$total)
daily.steps.median <- round(daily.steps.median, digits=2)
abline( v = daily.steps.median, col = 3, lty = 2)
legend("topright", c(paste("Mean:",daily.steps.mean),paste("Median:",daily.steps.median)) , col = 2:3, lty = 2)
library(ggplot2)
average.day <- activity %>%
group_by(time) %>%
summarize (mean=mean(steps, na.rm=TRUE))
# Get the max value
max.steps <- average.day[which.max(average.day$mean),]
ggplot(average.day, aes (x = factor(time), y = mean, group="time")) +
geom_line(colour="steelblue", size=1) +
theme_bw() +
scale_x_discrete(breaks=sprintf("%02d:00",seq(00,24, by=2))) +
ggtitle("Number of steps in an average day") + xlab("Time") + ylab("Steps") +
geom_segment(colour="red", lty= 2, aes(x = max.steps$time, y = 0, xend = max.steps$time, yend = max.steps$mean))
missing.values.total <- sum(is.na(activity$steps))
missing.values.percentage <- round (missing.values.total / nrow(activity) * 100, digits = 2)
missing.values.per.day <- activity %>%
group_by(date) %>%
summarize(sum=sum(is.na(steps)))
days.missing.values <- sum(missing.values.per.day$sum != 0)
barplot(missing.values.per.day$sum, xlab="Time", ylab="Amount of NAs", xpd = FALSE, main="Number of NA values per day", breaks=seq(missing.value.per.day[1,]$date, missing.value.per.day[61,]$date, by=15))
missing.values.per.day <- activity %>%
group_by(date) %>%
summarize(sum=sum(is.na(steps)))
days.missing.values <- sum(missing.values.per.day$sum != 0)
barplot(missing.values.per.day$sum, xlab="Time", ylab="Amount of NAs", xpd = FALSE, main="Number of NA values per day", breaks=seq(missing.value.per.day[1,]$date, missing.values.per.day[61,]$date, by=15))
missing.values.per.day <- activity %>%
group_by(date) %>%
summarize(sum=sum(is.na(steps)))
days.missing.values <- sum(missing.values.per.day$sum != 0)
barplot(missing.values.per.day$sum, xlab="Time", ylab="Amount of NAs", xpd = FALSE, main="Number of NA values per day", breaks=seq(missing.values.per.day[1,]$date, missing.values.per.day[61,]$date, by=15))
activity2 <- activity
# Create a function to fill the NAs with the average date
# The values need to be converted from int to numeric to keep the decimals
fillNA <- function(x)
{
if (is.na(x[1]))
{
x.time <- x[4]
idx <- which(average.day[1] == x.time)
avg.row <- average.day[idx,]
as.numeric(avg.row[2])
}
else
{
as.numeric(x[1])
}
}
activity2$steps <- apply(activity2, 1, fillNA)
missing.values.per.day <- activity %>%
group_by(date) %>%
summarize(sum=sum(is.na(steps)))
days.missing.values <- sum(missing.values.per.day$sum != 0)
barplot(missing.values.per.day$sum, xlab="Days", ylab="Amount of NAs", xpd = FALSE, main="Number of NA values per day")
activity2 <- activity
# Create a function to fill the NAs with the average date
# The values need to be converted from int to numeric to keep the decimals
fillNA <- function(x)
{
if (is.na(x[1]))
{
x.time <- x[4]
idx <- which(average.day[1] == x.time)
avg.row <- average.day[idx,]
as.numeric(avg.row[2])
}
else
{
as.numeric(x[1])
}
}
activity2$steps <- apply(activity2, 1, fillNA)
activity2 <- activity
# Create a function to fill the NAs with the average date
# The values need to be converted from int to numeric to keep the decimals
fillNA <- function(x)
{
if (is.na(x[1]))
{
x.time <- x[4]
idx <- which(average.day[1] == x.time)
avg.row <- average.day[idx,]
as.numeric(avg.row[2])
}
else
{
as.numeric(x[1])
}
}
activity2$steps <- apply(activity2, 1, fillNA)
daily2.steps <- activity2 %>%
group_by(date) %>%
summarize (total=sum(steps, na.rm=TRUE))
hist(daily2.steps$total, xlab ="Number of steps per day (grouped by thousands)", main ="Distribution of steps per day (with imputed values)", col = "lightblue", breaks=seq(0, by=1000, len=23))
# Compute and round the mean
daily2.steps.mean <- mean(daily2.steps$total)
daily2.steps.mean <- round(daily2.steps.mean, digits=2)
abline( v = daily2.steps.mean, col = 2, lty = 2)
# Compute and round the median
daily2.steps.median <- median(daily2.steps$total)
daily2.steps.median <- round(daily2.steps.median, digits=2)
abline( v = daily2.steps.median, col = 3, lty = 2)
legend("topright", c(paste("Mean:",daily2.steps.mean),paste("Median:",daily2.steps.median)) , col = 2:3, lty = 2)
activity2$weekpart <- as.factor(ifelse(weekdays(activity2$date) %in% c("Saturday","Sunday"), "weekend", "weekday"))
average2.day <- activity2 %>%
group_by(weekpart,time) %>%
summarize ( mean=mean(steps, na.rm=TRUE))
?by
by(average2.day, average2.day$weekpart, max)
by(average2.day, average2.day$weekpart, function(x) max(x$mean))
by(average2.day, average2.day$weekpart, function(x) {x[which.max(x$mean),]}
)
max.steps <- by(average2.day, average2.day$weekpart, function(x) {x[which.max(x$mean),]})
str(max.steps)
max.steps[1]
max.steps[1]$time
max.steps[1]
max.steps[1][1]
max.steps[1][1][1]
max.steps[[1]]
str(max.steps[[1]])
str(max.steps[[1]]$weekpart)
max.steps[[1]]$weekpart
max.steps[1]$weekpart
max.steps[[1]]$weekpart
max.steps[[1]]$time
max.steps[[1]]$mean
max.steps[[2]]$mean
version
restart
